version: "3.9"
# TODO: you can run all this stuff in a swarm mode
# OR create kube cluster with kind and deploy all this stuff there

services:
  wireguard:
    image: ghcr.io/wg-easy/wg-easy:latest
    container_name: wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      # Change the server's hostname (clients will connect to):
      - WG_HOST=${WGUI_HOST}
      # Change the Web UI Password:
      - PASSWORD=${WGUI_PASSWORD}
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    labels:
      - "traefik.enable=true"
      # UDP Routers
      - "traefik.udp.routers.wireguard-udp.entrypoints=streaming"
      # UDP Services
      - "traefik.udp.routers.wireguard-udp.service=wireguard-udp-svc"
      - "traefik.udp.services.wireguard-udp-svc.loadbalancer.server.port=51820"
      # HTTP Routers
      - "traefik.http.routers.wireguard-ui.entrypoints=web,websecure"
      - "traefik.http.routers.wireguard-ui.rule=Host(`${WGUI_HOST}`)"
      # HTTP Services
      - "traefik.http.routers.wireguard-ui.tls.certresolver=letsencrypt"
      - "traefik.http.services.wireguard-ui-svc.loadbalancer.server.port=51821"
    volumes:
      - /opt/server-apps/wireguard:/etc/wireguard

  jupyter:
    image: jupyter/minimal-notebook:latest
    container_name: jupyter
    restart: unless-stopped
    user: root
    environment:
      - NB_USER=jovyan
      - NB_UID=1234
      - NB_GID=1234
      - CHOWN_HOME=yes
      - CHOWN_HOME_OPTS=-R
    # TODO: password must be hashed
    command: "start-notebook.sh --NotebookApp.password=${JUPYTER_PASSWORD}"
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.jupyter.entrypoints=web,websecure"
      - "traefik.http.routers.jupyter.rule=Host(`${JUPYTER_HOST}`)"
      # HTTP Services
      - "traefik.http.routers.jupyter.tls=true"
      - "traefik.http.routers.jupyter.tls.certresolver=letsencrypt"
      - "traefik.http.services.jupyter-svc.loadbalancer.server.port=8888"
    volumes:
      - /opt/server-apps/jupyter/config:/home/jovyan/.jupyter
      - /opt/server-apps/jupyter/work:/home/jovyan/work
      - /opt/server-apps/jupyter/datasets:/home/jovyan/datasets
      - /opt/server-apps/jupyter/modules:/home/jovyan/modules
    ports:
      - 8888:8888

  pihole:
    # adblock lists: https://firebog.net/
    image: pihole/pihole:latest
    container_name: pihole
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    environment:
      - TZ=Europe/Ukraine
      - WEBPASSWORD=${PIHOLE_PASSWORD}
      - DNS1=127.0.0.1
      - DNS2=1.1.1.1
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.entrypoints=web,websecure"
      - "traefik.http.routers.pihole.rule=Host(`${PIHOLE_HOST}`)"
      - "traefik.http.routers.pihole.tls=true"
      - "traefik.http.routers.pihole.tls.certresolver=letsencrypt"
      - "traefik.http.services.pihole-svc.loadbalancer.server.port=80"
    volumes:
      - /opt/server-apps/pihole/etc-pihole:/etc/pihole
      - /opt/server-apps/pihole/etc-dnsmasq.d:/etc/dnsmasq.d

  shlink:
    image: shlinkio/shlink:latest
    container_name: shlink
    restart: unless-stopped
    environment:
      - DEFAULT_DOMAIN=${SHLINK_HOST}
      - IS_HTTPS_ENABLED=true
      - GEOLITE_LICENSE_KEY=${SHLINK_LICENSE_KEY}
      # command to generate API key: docker compose exec shlink shlink api-key:generate
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.shlink.entrypoints=web,websecure"
      - "traefik.http.routers.shlink.rule=Host(`${SHLINK_BE_HOST}`)"
      # HTTP Services
      - "traefik.http.routers.shlink.tls=true"
      - "traefik.http.routers.shlink.tls.certresolver=letsencrypt"
      - "traefik.http.services.shlink-svc.loadbalancer.server.port=8080"
    volumes:
      - /opt/server-apps/shlink/data:/etc/shlink/data

  shlink-ui:
    image: dmmeteo/shlink-web-client:latest
    container_name: shlink-ui
    restart: unless-stopped
    environment:
      - SHLINK_API_URL=https://${SHLINK_HOST}
      - SHLINK_BASIC_AUTH_USERS=${SHLINK_BASIC_AUTH_USERS}
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.shlink-ui.entrypoints=web,websecure"
      - "traefik.http.routers.shlink-ui.rule=Host(`${SHLINK_FE_HOST}`)"
      # HTTP Services
      - "traefik.http.routers.shlink-ui.tls=true"
      - "traefik.http.routers.shlink-ui.tls.certresolver=letsencrypt"
      - "traefik.http.services.shlink-ui-svc.loadbalancer.server.port=80"

  traefik:
    image: traefik:v2.10.5
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      # HTTP & UDP Routers
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entryPoints.streaming.address=:51820/udp"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # SSL Certificates
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCTYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # Kasm (insecure connection between Traefik and the backend servers)
      - "--serverstransport.insecureskipverify"
      - "--log=true"
      - "--log.level=DEBUG"
    network_mode: host
    volumes:
      - /opt/server-apps/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    profiles:
      - production